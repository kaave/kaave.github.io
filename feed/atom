<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaave.github.io/</id>
    <title>kaave portal site | blog</title>
    <updated>2018-06-14T13:03:40Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>kaave</name>
        <email>junkjunction@gmail.com</email>
        <uri>https://kaave.github.io/</uri>
    </author>
    <link rel="alternate" href="https://kaave.github.io/"/>
    <link rel="self" href="https://kaave.github.io/feed/atom"/>
    <subtitle>kaave portal site | blog</subtitle>
    <icon>https://kaave.github.io/</icon>
    <rights>All rights reserved 2016 - 2018, kaave</rights>
    <entry>
        <title type="html"><![CDATA[Pixi.jsでGlitch]]></title>
        <id>https://kaave.github.io/blog/2018/06/14-pixi-glitch.html</id>
        <link href="https://kaave.github.io/blog/2018/06/14-pixi-glitch.html">
        </link>
        <updated>2018-06-14T00:00:00Z</updated>
        <summary type="html"><![CDATA[JavaScriptPixiJSWebGL]]></summary>
        <content type="html"><![CDATA[<h2 id="-">モチベ</h2>
<p>別にメディアアートまでいかなくてもいいけどTOPにばばばんと表示されてる画像や背景に表示している画像にエフェクトをかけたりしてみたいなぁというモチベが一年くらい前からくすぶってたんですが、ついに大きな&quot;炎&quot;になったので取り組んでみました。</p>
<p>まずはライブラリの選択からじゃーってことでPixi.jsかThree.jsのどっちかをかじろうと考えた結果、Pixi.jsをやることに。</p>
<p>で、色々ぐぐってたら<a href="https://github.com/ktingvoar/PixiGlitch">良さげなコード</a>を発見したんですが結構長いこと更新されておらず、最新のバージョンだと動かなかった&amp;サンプルがイマイチだったので自分でそのへんを更新してみました。</p>
<h3 id="-">制作物</h3>
<ul>
<li><a href="https://romantic-fermat-4102af.netlify.com/filter.html">Demo</a></li>
<li><a href="https://github.com/kaave/playground-pixi-js">Repository</a><ul>
<li>面倒くさくて検証用の環境使ってそのまま書いちゃってるのでそのうち移転するかも。</li>
</ul>
</li>
</ul>
<h3 id="demo-">Demoについて</h3>
<h4 id="-">操作方法</h4>
<ul>
<li>左上のプルダウンからエフェクトかける対象を選択できます。プリセット画像、デバイスのカメラ、アップロード画像のいずれかとなります。<ul>
<li>アップロード画像はgif, jpg, pngに対応しています。</li>
<li>アップロードフォームを隠してプルダウンの選択で発火するようにしたかったんですがセキュリティの関係でアウツ。なんとかする方法ってあるんですかね？</li>
</ul>
</li>
<li>右のフォームでエフェクトを選択します。<ul>
<li>色系はON/OFFしかないです。</li>
<li>その他は色々パラメータがあるんでついでにランダムもつけました。乱数のアルゴリズムは単なる<code>Math.random</code>なので微妙です。</li>
</ul>
</li>
<li>キーボードでエフェクトのON/OFF、ランダムのON/OFFを設定できます。<ul>
<li>フォームの名称右にカッコでくくられた一文字があると思いますが、そのキーを押すとON/OFFが切り替わります。</li>
<li><code>shift</code>を押しながらでランダムのON/OFFが切り替わります。</li>
<li><code>enter</code>ですべてのエフェクトがOFFになります。</li>
<li><code>shift</code>を押しながら<code>enter</code>ですべてのランダムがOFFになります。</li>
<li>とりあえず<code>a</code>を叩いて<code>shift+a</code>を叩き、ほかをいじってくのがおもしろいです！ソースはもちろんカメラで！</li>
</ul>
</li>
</ul>
<h4 id="netlify">Netlify</h4>
<p>GitHub Pagesでもよかったんですが面倒くさかったのでNetlifyに。相も変わらず楽すぎます！もうちょっと回線がぶっとくなるといいなぁ。</p>
<h3 id="-">コードとかそのへん</h3>
<h4 id="webpack-">webpackさまさま</h4>
<p>シェーダーのコードを<code>.frag</code>で別ファイルに構築し、<code>raw-loader</code>で読み込む環境を作りました。これが非常にいい感じ。</p>
<h4 id="typescript-pixi-js">TypeScriptでPixi.js</h4>
<p>どうも型ファイルが色々と変でいくつか<code>any</code>でごまかしました。あんまいいことじゃないけど。だって型ファイルに手ぇ入れてプルリク出すほどPixi.jsわかんないんで。</p>
<h4 id="-">シェーダーわからん</h4>
<p>これは&quot;特殊技能&quot;でWeb屋にこれを求めたらいかんなという印象ですがいかがなもんでしょう…。</p>
<h4 id="web-pixi-js-">Webアクセシビリティに準拠したPixi.jsの使い方</h4>
<p>今回は画像をゴリゴリやってるだけなので<code>role=&quot;presentation&quot;</code>つけときゃとりあえずいいかなって内容なんですが、例えばキャッチコピーをばんとテキストで入れてそいつをごりごりいじったときにどうすんのがいいんでしょう？</p>
<p><code>canvas</code>に<code>aria-label</code>とか？そのうち調べよう・・・。</p>
<h3 id="-">今後</h3>
<h4 id="-">斜めに画像をちょん切りたい</h4>
<p>あんまグリッチって感じじゃないけどどうやってやるのかまだ調べてないんですけど画像を斜めにスライスして個別に移動とかやりたいんですよね。</p>
<h4 id="dom-">DOMではできないテキスト表現</h4>
<p>小さなテキストを死ぬほど描画していろいろやりたい。ファミコンをどついたような感じというか。DOMでやるより軽そうだし…。</p>
<h4 id="-">シェーダーはよくわかんない</h4>
<p>上でも書いたけどわかんないのでネットで拾ってきたのをちょっとカスタムできるくらいで当面はいいかな。</p>
<h4 id="-">画面まるごと</h4>
<p><a href="https://html2canvas.hertzen.com/">html2canvas</a>でうまいこといけそうなんだけど、IEが立ちはだかるのであった。IEいらん案件がでてきたらやってみたいね。</p>
]]></content>
        <author>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </author>
        <contributor>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[サイトまるごと作り直しました]]></title>
        <id>https://kaave.github.io/blog/2017/07/02-ordinary-day.html</id>
        <link href="https://kaave.github.io/blog/2017/07/02-ordinary-day.html">
        </link>
        <updated>2017-07-02T00:00:00Z</updated>
        <summary type="html"><![CDATA[Reactgulp]]></summary>
        <content type="html"><![CDATA[<h2 id="github-io-">github.io作り直しました</h2>
<p>もう全部いじりました。つってもまぁ基本的な部分はそのままですが。</p>
<p>これを機に思い立ったときにだけ更新するようにします。</p>
<h3 id="-">できたとこ</h3>
<h4 id="-">モバイルファースト</h4>
<p>これ結構考えものだなぁと思った。</p>
<p>少なくともPC版のプロトタイプ(大まかなレイアウト)までやってからスマホ側の構築やんないと、やべぇここにコンテナ的なdivがいるわ、ということがわりと普通に発生するなと。</p>
<p>幸いデザインがあってないようなものだったのでなんとかなりました。</p>
<h4 id="rss-atom-">RSS(atom)対応</h4>
<p><a href="https://www.npmjs.com/package/feed">feed</a>という素晴らしいモジュールがすべて解決してくれました。</p>
<h4 id="-">グリッドレイアウト</h4>
<p>サイト全体を単純に区切るだけなら全然悪くない。問題はモバイルの対応がほんとつい最近だったってことかな。</p>
<h4 id="-">アニメーション連発</h4>
<p>やってみたらできたってやつです。</p>
<h4 id="react-router-">react-routerで構築</h4>
<p>これがなかなかめんどくさかった。</p>
<p>URLから目的のJSONをfetchしてきて表示する、ということをやっているんですが、URLにマッチしたcomponentの中でパラメータを取得してそれを親に返してうんぬんかんぬんしてます。</p>
<p>微妙、の一言。まぁreact-routerのおかげで記事それぞれにURL発行できたんですが。</p>
<h4 id="highlight-js-">highlight.js対応</h4>
<p>前もやってたっけ？もはや記憶にないしコードもふっ飛ばした。</p>
<h3 id="-">できなかったとこ</h3>
<h4 id="gulp-ssr">gulpタスク内でSSR</h4>
<p>最初は楽勝だろと思ってたんですが、よく考えたらJSXをgulpから読み込まないといけないからクソめんどくない？って気づいて一気に嫌になりました。</p>
<p>今は記事毎にrootと同じhtmlを作成して404にならないようにして、あとは遷移先でreact-routerがよしなにやってくれるのに任せてます。</p>
<p>gulp-babelとか使えばできそうではあります。</p>
<h2 id="-">日記</h2>
<p>長久手のイオンに行ってきました。</p>
<p>インナーバッグがほしいなーってのと、自転車に乗っておきたいなーっていう理由で。</p>
<p>イオンっていうと吹き抜けが凄いイメージだったけど、そうじゃなかったので意外だった。あと、混みすぎ。</p>
]]></content>
        <author>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </author>
        <contributor>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[立ちっぱなし]]></title>
        <id>https://kaave.github.io/blog/2016/04/05-stand-and-write.html</id>
        <link href="https://kaave.github.io/blog/2016/04/05-stand-and-write.html">
        </link>
        <updated>2016-04-05T00:00:00Z</updated>
        <content type="html"><![CDATA[<h2 id="-">立ちっぱなし</h2>
<p>打ち合わせでホワイトボード書きまくったので疲れた。</p>
<h3 id="-">めし</h3>
<h3 id="-">買い物</h3>
<h3 id="-">お勉強</h3>
<h3 id="-">遊び</h3>
]]></content>
        <author>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </author>
        <contributor>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[ささっと]]></title>
        <id>https://kaave.github.io/blog/2016/04/04-css-animation.html</id>
        <link href="https://kaave.github.io/blog/2016/04/04-css-animation.html">
        </link>
        <updated>2016-04-04T00:00:00Z</updated>
        <content type="html"><![CDATA[<h2 id="-">ささっと</h2>
<p>仕事で右からニュッと出てくるメニューをCSSアニメーション使って書いた。<br>いや〜CSSアニメーションホント楽。</p>
<h3 id="-">めし</h3>
<p>豚肉とにんにくの芽炒めを作った。</p>
]]></content>
        <author>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </author>
        <contributor>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[ATR]]></title>
        <id>https://kaave.github.io/blog/2016/04/03-atr.html</id>
        <link href="https://kaave.github.io/blog/2016/04/03-atr.html">
        </link>
        <updated>2016-04-03T00:00:00Z</updated>
        <content type="html"><![CDATA[<h2 id="atr">ATR</h2>
<p>シャキッとしないのでATR聞いているが、ハイテンションになるための音楽としてATRを超えるものはなかなかないんじゃないだろうか。</p>
<h3 id="-">めし</h3>
<p>ラフテーとレンズ豆のマリネ作った。</p>
<p>レンズ豆は5~6分茹でると硬さが残っていい感じ。</p>
]]></content>
        <author>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </author>
        <contributor>
            <name>kaave</name>
            <email>junkjunction@gmail.com</email>
            <uri>https://kaave.github.io/</uri>
        </contributor>
    </entry>
</feed>